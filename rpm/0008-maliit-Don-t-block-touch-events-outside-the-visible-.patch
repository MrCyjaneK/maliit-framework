From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Andrew den Exter <andrew.den.exter@jolla.com>
Date: Wed, 1 Aug 2018 14:00:09 +1000
Subject: [PATCH] [maliit] Don't block touch events outside the visible part of
 the keyboard. Contributes to JB#42563

A window surface may be created and destroyed many times over the
lifetime of a window so we need to react to the creation to set
window properties rather than forcing creation as a one off. And
wayland needs to be informed of the input region so it can direct
touchs appropriately.
---
 src/lipstickplatform.cpp | 58 +++++++++++++++++++++++++++++++++++-----
 1 file changed, 52 insertions(+), 6 deletions(-)

diff --git a/src/lipstickplatform.cpp b/src/lipstickplatform.cpp
index f380f42..4975879 100644
--- a/src/lipstickplatform.cpp
+++ b/src/lipstickplatform.cpp
@@ -14,23 +14,69 @@
 #include "lipstickplatform.h"
 
 #include <QGuiApplication>
+#include <QPlatformSurfaceEvent>
 #include <qpa/qplatformnativeinterface.h>
 
 namespace Maliit
 {
 
+class LipstickWindowPropertyBroadcaster : public QObject
+{
+public:
+    LipstickWindowPropertyBroadcaster(QWindow *window)
+        : QObject(window)
+        , m_window(window)
+    {
+        m_window->installEventFilter(this);
+    }
+
+    bool eventFilter(QObject *object, QEvent *event)
+    {
+        if (object != m_window) {
+            return false;
+        } else switch (event->type()) {
+        case QEvent::PlatformSurface: {
+            QPlatformSurfaceEvent *platformEvent = static_cast<QPlatformSurfaceEvent *>(event);
+
+            if (QPlatformWindow *handle = platformEvent->surfaceEventType() == QPlatformSurfaceEvent::SurfaceCreated
+                    ? m_window->handle()
+                    : nullptr) {
+                QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
+
+                native->setWindowProperty(handle, QStringLiteral("CATEGORY"), QStringLiteral("overlay"));
+                native->setWindowProperty(handle, QStringLiteral("MOUSE_REGION"), m_window->property("MOUSE_REGION"));
+            }
+            return false;
+        }
+        case QEvent::DynamicPropertyChange: {
+            QDynamicPropertyChangeEvent *propertyEvent = static_cast<QDynamicPropertyChangeEvent *>(event);
+            if (QPlatformWindow *handle = propertyEvent->propertyName() == "MOUSE_REGION"
+                    ? m_window->handle()
+                    : nullptr) {
+                QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
+
+                native->setWindowProperty(handle, QStringLiteral("MOUSE_REGION"), m_window->property("MOUSE_REGION"));
+            }
+            return false;
+        }
+        default:
+            return false;
+        }
+    }
+
+private:
+    QWindow * const m_window;
+};
+
 void LipstickPlatform::setupInputPanel(QWindow* window, Maliit::Position)
 {
-    QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
-    window->create();
-    native->setWindowProperty(window->handle(), QLatin1String("CATEGORY"), QString("overlay"));
+    new LipstickWindowPropertyBroadcaster(window);
 }
 
 void LipstickPlatform::setInputRegion(QWindow* window, const QRegion& region)
 {
-    QPlatformNativeInterface *native = QGuiApplication::platformNativeInterface();
-    window->create();
-    native->setWindowProperty(window->handle(), QLatin1String("MOUSE_REGION"), QVariant(region));
+    window->setProperty("MOUSE_REGION", region);
+    window->setMask(region);
 }
 
 } // namespace Maliit
-- 
2.35.1

